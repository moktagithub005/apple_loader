import streamlit as st
import firebase_admin
from firebase_admin import credentials, storage, firestore
from datetime import datetime
import uuid
from PIL import Image
import io
import json

# Firebase Initialization - Fixed Version
if not firebase_admin._apps:
    try:
        # Method 1: If FIREBASE_KEY is a JSON string in secrets
        if "FIREBASE_KEY" in st.secrets:
            # Try to parse as JSON string first
            try:
                firebase_key = json.loads(st.secrets["FIREBASE_KEY"])
                cred = credentials.Certificate(firebase_key)
            except json.JSONDecodeError:
                # If it fails, maybe it's already a dict in secrets.toml
                firebase_key = dict(st.secrets["FIREBASE_KEY"])
                cred = credentials.Certificate(firebase_key)
        
        # Method 2: If individual keys are stored separately in secrets
        elif "type" in st.secrets:
            firebase_key = {
                "type": st.secrets["type"],
                "project_id": st.secrets["project_id"],
                "private_key_id": st.secrets["private_key_id"],
                "private_key": st.secrets["private_key"].replace('\\n', '\n'),  # Fix newlines
                "client_email": st.secrets["client_email"],
                "client_id": st.secrets["client_id"],
                "auth_uri": st.secrets["auth_uri"],
                "token_uri": st.secrets["token_uri"],
                "auth_provider_x509_cert_url": st.secrets["auth_provider_x509_cert_url"],
                "client_x509_cert_url": st.secrets["client_x509_cert_url"]
            }
            cred = credentials.Certificate(firebase_key)
        
        else:
            st.error("тЭМ Firebase credentials not found in secrets!")
            st.stop()
            
        # Initialize Firebase
        firebase_admin.initialize_app(cred, {
            'storageBucket': 'apple-store-d26b3.appspot.com'
        })
        
    except Exception as e:
        st.error(f"тЭМ Firebase initialization error: {str(e)}")
        st.error("Please check your Firebase configuration in Streamlit secrets.")
        st.stop()

# Firestore & Storage references
db = firestore.client()
bucket = storage.bucket()

# Rest of your code remains the same...
st.title("ЁЯНО Apple Dataset Collector")
st.markdown("### рд╕реЗрдм рдХреА рддрд╕реНрд╡реАрд░реЗрдВ рдЬрдорд╛ рдХрд░реЗрдВ - Apple Images Collection")

# Introduction and Purpose
st.markdown("""
---
### ЁЯОп **Why are we collecting apple images? / рд╣рдо рд╕реЗрдм рдХреА рддрд╕реНрд╡реАрд░реЗрдВ рдХреНрдпреЛрдВ рдЬрдорд╛ рдХрд░ рд░рд╣реЗ рд╣реИрдВ?**

**English:** We are building a comprehensive apple dataset to help train AI models that can identify different apple varieties. Your contribution will help improve agricultural technology and assist farmers in identifying apple types.

**рд╣рд┐рдВрджреА:** рд╣рдо рдПрдХ рд╡реНрдпрд╛рдкрдХ рд╕реЗрдм рдбреЗрдЯрд╛рд╕реЗрдЯ рдмрдирд╛ рд░рд╣реЗ рд╣реИрдВ рдЬреЛ AI рдореЙрдбрд▓ рдХреЛ рд╡рд┐рднрд┐рдиреНрди рд╕реЗрдм рдХреА рдХрд┐рд╕реНрдореЛрдВ рдХреЛ рдкрд╣рдЪрд╛рдирдиреЗ рдореЗрдВ рдорджрдж рдХрд░реЗрдЧрд╛ред рдЖрдкрдХрд╛ рдпреЛрдЧрджрд╛рди рдХреГрд╖рд┐ рддрдХрдиреАрдХ рдХреЛ рдмреЗрд╣рддрд░ рдмрдирд╛рдиреЗ рдФрд░ рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЛ рд╕реЗрдм рдХреА рдХрд┐рд╕реНрдореЗрдВ рдкрд╣рдЪрд╛рдирдиреЗ рдореЗрдВ рд╕рд╣рд╛рдпрддрд╛ рдХрд░реЗрдЧрд╛ред

---
""")

# Instructions in Hindi
st.markdown("""
### ЁЯУ▒ **How to upload images / рддрд╕реНрд╡реАрд░ рдЕрдкрд▓реЛрдб рдХреИрд╕реЗ рдХрд░реЗрдВ:**

**рд╣рд┐рдВрджреА рдирд┐рд░реНрджреЗрд╢:**
1. **ЁЯУ╖ рдХреИрдорд░рд╛ рд╕реЗ рддрд╕реНрд╡реАрд░ рд▓реЗрдВ:** рдиреАрдЪреЗ "Take Photo" рдмрдЯрди рджрдмрд╛рдПрдВ рдпрд╛ рдЕрдкрдиреА рдЧреИрд▓рд░реА рд╕реЗ рддрд╕реНрд╡реАрд░ рдЪреБрдиреЗрдВ
2. **ЁЯНП рд╕реЗрдм рдХреА рдХрд┐рд╕реНрдо рдмрддрд╛рдПрдВ:** рдЬреИрд╕реЗ - рдлреВрдЬреА, рдЧрд╛рд▓рд╛, рдХрд╢реНрдореАрд░реА, рд╢рд┐рдорд▓рд╛ рдЖрджрд┐
3. **ЁЯУН рдЬрдЧрд╣ рдХрд╛ рдирд╛рдо (рд╡реИрдХрд▓реНрдкрд┐рдХ):** рдЖрдкрдХрд╛ рд╢рд╣рд░ рдпрд╛ рд░рд╛рдЬреНрдп рдХрд╛ рдирд╛рдо
4. **ЁЯЪА рд╕рдмрдорд┐рдЯ рдХрд░реЗрдВ:** "Submit" рдмрдЯрди рджрдмрд╛рдПрдВ

**Tips for good photos / рдЕрдЪреНрдЫреА рддрд╕реНрд╡реАрд░ рдХреЗ рд▓рд┐рдП рдЯрд┐рдкреНрд╕:**
- ЁЯМЮ рдЕрдЪреНрдЫреА рд░реЛрд╢рдиреА рдореЗрдВ рддрд╕реНрд╡реАрд░ рд▓реЗрдВ
- ЁЯНО рд╕реЗрдм рдХреЛ рд╕рд╛рдл-рд╕рд╛рдл рджрд┐рдЦрд╛рдПрдВ
- ЁЯУП рд╕реЗрдм рдХреЛ рдкрд╛рд╕ рд╕реЗ рд▓реЗрдВ (close-up)
- ЁЯОп рдПрдХ рдмрд╛рд░ рдореЗрдВ рдПрдХ рд╣реА рд╕реЗрдм рдХреА рддрд╕реНрд╡реАрд░ рд▓реЗрдВ

---
""")

# Image Upload Options
st.subheader("ЁЯУ╕ Upload Apple Image / рд╕реЗрдм рдХреА рддрд╕реНрд╡реАрд░ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ")

# Tab for different upload methods
tab1, tab2 = st.tabs(["ЁЯУ▒ Camera / рдХреИрдорд░рд╛", "ЁЯУБ Upload File / рдлрд╛рдЗрд▓ рдЕрдкрд▓реЛрдб"])

uploaded_file = None

with tab1:
    st.markdown("**ЁЯУ╖ Take a photo using your device camera / рдЕрдкрдиреЗ рдбрд┐рд╡рд╛рдЗрд╕ рдХреЗ рдХреИрдорд░рд╛ рд╕реЗ рддрд╕реНрд╡реАрд░ рд▓реЗрдВ**")
    camera_image = st.camera_input("Take a picture of an apple / рд╕реЗрдм рдХреА рддрд╕реНрд╡реАрд░ рд▓реЗрдВ")
    
    if camera_image:
        # Image rotation controls
        st.markdown("**ЁЯФД Rotate image if needed / рдЬрд░реВрд░рдд рдкрдбрд╝рдиреЗ рдкрд░ рддрд╕реНрд╡реАрд░ рдШреБрдорд╛рдПрдВ:**")
        
        col_rot1, col_rot2, col_rot3, col_rot4 = st.columns(4)
        
        with col_rot1:
            rotate_left = st.button("тЖ║ 90┬░ Left / рдмрд╛рдПрдВ", key="cam_left")
        with col_rot2:
            rotate_right = st.button("тЖ╗ 90┬░ Right / рджрд╛рдПрдВ", key="cam_right")
        with col_rot3:
            rotate_180 = st.button("тЖХ 180┬░ Flip / рдкрд▓рдЯреЗрдВ", key="cam_flip")
        with col_rot4:
            reset_rotation = st.button("ЁЯФД Reset / рд░реАрд╕реЗрдЯ", key="cam_reset")
        
        # Initialize rotation state
        if 'camera_rotation' not in st.session_state:
            st.session_state.camera_rotation = 0
        
        # Handle rotation buttons
        if rotate_left:
            st.session_state.camera_rotation = (st.session_state.camera_rotation - 90) % 360
        if rotate_right:
            st.session_state.camera_rotation = (st.session_state.camera_rotation + 90) % 360
        if rotate_180:
            st.session_state.camera_rotation = (st.session_state.camera_rotation + 180) % 360
        if reset_rotation:
            st.session_state.camera_rotation = 0
        
        # Apply rotation and show preview
        if st.session_state.camera_rotation != 0:
            original_image = Image.open(camera_image)
            rotated_image = original_image.rotate(-st.session_state.camera_rotation, expand=True)
            
            # Convert rotated image back to bytes
            img_byte_array = io.BytesIO()
            rotated_image.save(img_byte_array, format='JPEG')
            img_byte_array.seek(0)
            
            # Create a file-like object for upload
            class RotatedImageFile:
                def __init__(self, byte_data):
                    self.byte_data = byte_data
                    
                def getvalue(self):
                    return self.byte_data.getvalue()
                    
                def read(self):
                    return self.byte_data.getvalue()
            
            uploaded_file = RotatedImageFile(img_byte_array)
            
            # Show current rotation
            st.info(f"ЁЯФД Current rotation: {st.session_state.camera_rotation}┬░ / рд╡рд░реНрддрдорд╛рди рдШреБрдорд╛рд╡: {st.session_state.camera_rotation}┬░")
            st.image(rotated_image, caption="Rotated Image / рдШреБрдорд╛рдИ рдЧрдИ рддрд╕реНрд╡реАрд░", width=300)
        else:
            uploaded_file = camera_image
            st.image(camera_image, caption="Original Image / рдореВрд▓ рддрд╕реНрд╡реАрд░", width=300)

with tab2:
    st.markdown("**ЁЯУБ Choose an image from your device / рдЕрдкрдиреЗ рдбрд┐рд╡рд╛рдЗрд╕ рд╕реЗ рддрд╕реНрд╡реАрд░ рдЪреБрдиреЗрдВ**")
    file_upload = st.file_uploader(
        "Select apple image / рд╕реЗрдм рдХреА рддрд╕реНрд╡реАрд░ рдЪреБрдиреЗрдВ", 
        type=["jpg", "jpeg", "png"],
        help="рд╣рд┐рдВрджреА: JPG, JPEG рдпрд╛ PNG рдлреЙрд░реНрдореЗрдЯ рдореЗрдВ рддрд╕реНрд╡реАрд░ рдЪреБрдиреЗрдВ"
    )
    
    if file_upload:
        # Image rotation controls for uploaded files too
        st.markdown("**ЁЯФД Rotate image if needed / рдЬрд░реВрд░рдд рдкрдбрд╝рдиреЗ рдкрд░ рддрд╕реНрд╡реАрд░ рдШреБрдорд╛рдПрдВ:**")
        
        col_rot1, col_rot2, col_rot3, col_rot4 = st.columns(4)
        
        with col_rot1:
            rotate_left_upload = st.button("тЖ║ 90┬░ Left / рдмрд╛рдПрдВ", key="upload_left")
        with col_rot2:
            rotate_right_upload = st.button("тЖ╗ 90┬░ Right / рджрд╛рдПрдВ", key="upload_right")
        with col_rot3:
            rotate_180_upload = st.button("тЖХ 180┬░ Flip / рдкрд▓рдЯреЗрдВ", key="upload_flip")
        with col_rot4:
            reset_rotation_upload = st.button("ЁЯФД Reset / рд░реАрд╕реЗрдЯ", key="upload_reset")
        
        # Initialize rotation state for uploads
        if 'upload_rotation' not in st.session_state:
            st.session_state.upload_rotation = 0
        
        # Handle rotation buttons for uploads
        if rotate_left_upload:
            st.session_state.upload_rotation = (st.session_state.upload_rotation - 90) % 360
        if rotate_right_upload:
            st.session_state.upload_rotation = (st.session_state.upload_rotation + 90) % 360
        if rotate_180_upload:
            st.session_state.upload_rotation = (st.session_state.upload_rotation + 180) % 360
        if reset_rotation_upload:
            st.session_state.upload_rotation = 0
        
        # Apply rotation and show preview for uploads
        if st.session_state.upload_rotation != 0:
            original_image = Image.open(file_upload)
            rotated_image = original_image.rotate(-st.session_state.upload_rotation, expand=True)
            
            # Convert rotated image back to bytes
            img_byte_array = io.BytesIO()
            rotated_image.save(img_byte_array, format='JPEG')
            img_byte_array.seek(0)
            
            # Create a file-like object for upload
            class RotatedImageFile:
                def __init__(self, byte_data):
                    self.byte_data = byte_data
                    
                def getvalue(self):
                    return self.byte_data.getvalue()
                    
                def read(self):
                    return self.byte_data.getvalue()
            
            uploaded_file = RotatedImageFile(img_byte_array)
            
            # Show current rotation
            st.info(f"ЁЯФД Current rotation: {st.session_state.upload_rotation}┬░ / рд╡рд░реНрддрдорд╛рди рдШреБрдорд╛рд╡: {st.session_state.upload_rotation}┬░")
            st.image(rotated_image, caption="Rotated Image / рдШреБрдорд╛рдИ рдЧрдИ рддрд╕реНрд╡реАрд░", width=300)
        else:
            uploaded_file = file_upload
            st.image(file_upload, caption="Original Image / рдореВрд▓ рддрд╕реНрд╡реАрд░", width=300)

# Form Input
st.subheader("ЁЯУЭ Image Details / рддрд╕реНрд╡реАрд░ рдХреА рдЬрд╛рдирдХрд╛рд░реА")

col1, col2 = st.columns(2)

with col1:
    variety = st.text_input(
        "ЁЯНП Apple Variety / рд╕реЗрдм рдХреА рдХрд┐рд╕реНрдо", 
        placeholder="e.g., Fuji, Gala, Kashmiri, Shimla",
        help="рд╣рд┐рдВрджреА: рд╕реЗрдм рдХреА рдХрд┐рд╕реНрдо рдХрд╛ рдирд╛рдо рд▓рд┐рдЦреЗрдВ рдЬреИрд╕реЗ рдлреВрдЬреА, рдЧрд╛рд▓рд╛, рдХрд╢реНрдореАрд░реА"
    )

with col2:
    location = st.text_input(
        "ЁЯУН Location / рд╕реНрдерд╛рди (optional/рд╡реИрдХрд▓реНрдкрд┐рдХ)", 
        placeholder="City, State / рд╢рд╣рд░, рд░рд╛рдЬреНрдп",
        help="рд╣рд┐рдВрджреА: рдЖрдкрдХрд╛ рд╢рд╣рд░ рдпрд╛ рд░рд╛рдЬреНрдп рдХрд╛ рдирд╛рдо (рдпрд╣ рднрд░рдирд╛ рдЬрд░реВрд░реА рдирд╣реАрдВ)"
    )

# Preview uploaded image
if uploaded_file:
    st.subheader("ЁЯЦ╝я╕П Final Image Preview / рдЕрдВрддрд┐рдо рддрд╕реНрд╡реАрд░ рдХрд╛ рдкреВрд░реНрд╡рд╛рд╡рд▓реЛрдХрди")
    # Only show preview if it's not already shown in rotation section
    if ('camera_rotation' not in st.session_state or st.session_state.camera_rotation == 0) and \
       ('upload_rotation' not in st.session_state or st.session_state.upload_rotation == 0):
        image = Image.open(uploaded_file)
        st.image(image, caption="Selected Image / рдЪреБрдиреА рдЧрдИ рддрд╕реНрд╡реАрд░", width=300)

# Submit button
if uploaded_file and st.button("ЁЯЪА Submit Image / рддрд╕реНрд╡реАрд░ рд╕рдмрдорд┐рдЯ рдХрд░реЗрдВ", type="primary"):
    if not variety.strip():
        st.error("тЭМ Please enter apple variety / рдХреГрдкрдпрд╛ рд╕реЗрдм рдХреА рдХрд┐рд╕реНрдо рднрд░реЗрдВ")
    else:
        try:
            with st.spinner("тП│ Uploading image... / рддрд╕реНрд╡реАрд░ рдЕрдкрд▓реЛрдб рд╣реЛ рд░рд╣реА рд╣реИ..."):
                # Convert image to bytes if needed
                if hasattr(uploaded_file, 'getvalue'):
                    image_bytes = uploaded_file.getvalue()
                else:
                    # For camera input
                    image_bytes = uploaded_file.read()
                
                # Unique file name
                file_name = f"apples/{uuid.uuid4()}.jpg"
                
                # Upload to Firebase Storage
                blob = bucket.blob(file_name)
                blob.upload_from_string(image_bytes, content_type='image/jpeg')
                blob.make_public()  # Optional: make image accessible via URL
                image_url = blob.public_url
                
                # Save metadata to Firestore
                doc = {
                    "variety": variety.strip(),
                    "location": location.strip() if location.strip() else "Not specified",
                    "timestamp": datetime.utcnow(),
                    "image_url": image_url,
                    "file_name": file_name
                }
                db.collection("apple_images").add(doc)
                
                # Success message
                st.success("тЬЕ Image uploaded successfully! / рддрд╕реНрд╡реАрд░ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЕрдкрд▓реЛрдб рд╣реЛ рдЧрдИ!")
                st.balloons()
                
                # Show uploaded image
                st.image(image_url, caption=f"ЁЯУ╕ Uploaded: {variety} / рдЕрдкрд▓реЛрдб рдХреА рдЧрдИ: {variety}", width=300)
                
                # Thank you message
                st.markdown("""
                ### ЁЯЩП Thank you for your contribution! / рдЖрдкрдХреЗ рдпреЛрдЧрджрд╛рди рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рдж!
                
                **English:** Your image has been successfully added to our apple dataset. This will help improve AI models for agricultural applications.
                
                **рд╣рд┐рдВрджреА:** рдЖрдкрдХреА рддрд╕реНрд╡реАрд░ рд╣рдорд╛рд░реЗ рд╕реЗрдм рдбреЗрдЯрд╛рд╕реЗрдЯ рдореЗрдВ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЬреЛрдбрд╝ рджреА рдЧрдИ рд╣реИред рдпрд╣ рдХреГрд╖рд┐ рдЕрдиреБрдкреНрд░рдпреЛрдЧреЛрдВ рдХреЗ рд▓рд┐рдП AI рдореЙрдбрд▓ рдХреЛ рдмреЗрд╣рддрд░ рдмрдирд╛рдиреЗ рдореЗрдВ рдорджрдж рдХрд░реЗрдЧреАред
                """)
                
        except Exception as e:
            st.error(f"тЭМ Error uploading image / рддрд╕реНрд╡реАрд░ рдЕрдкрд▓реЛрдб рдХрд░рддреЗ рд╕рдордп рддреНрд░реБрдЯрд┐: {str(e)}")

# Footer
st.markdown("""
---
### ЁЯУК **Dataset Statistics / рдбреЗрдЯрд╛рд╕реЗрдЯ рдЖрдВрдХрдбрд╝реЗ**
Help us reach our goal of collecting diverse apple images from across India!
рд╣рдорд╛рд░реЗ рднрд╛рд░рдд рднрд░ рд╕реЗ рд╡рд┐рд╡рд┐рдз рд╕реЗрдм рдХреА рддрд╕реНрд╡реАрд░реЗрдВ рдЬрдорд╛ рдХрд░рдиреЗ рдХреЗ рд▓рдХреНрд╖реНрдп рдореЗрдВ рд╣рдорд╛рд░реА рдорджрдж рдХрд░реЗрдВ!
""")

# Display current count (optional - requires additional Firestore query)
try:
    # Get count of documents in collection
    docs = db.collection("apple_images").limit(1).stream()
    count = len(list(docs))
    if count > 0:
        st.metric("ЁЯУИ Total Images Collected / рдХреБрд▓ рдПрдХрддреНрд░рд┐рдд рддрд╕реНрд╡реАрд░реЗрдВ", count)
except:
    pass  # Handle if counting fails

st.markdown("""
---
**Contact[7876471141] / рд╕рдВрдкрд░реНрдХ:** For any queries, please reach out to our team.
рдХрд┐рд╕реА рднреА рдкреНрд░рд╢реНрди рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рд╣рдорд╛рд░реА рдЯреАрдо рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред
            TEAM UNISOLE
""")